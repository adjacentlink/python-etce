#!/usr/bin/env python
#
# Copyright (c) 2013-2017,2019 - Adjacent Link LLC, Bridgewater, New Jersey
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in
#   the documentation and/or other materials provided with the
#   distribution.
# * Neither the name of Adjacent Link LLC nor the names of its
#   contributors may be used to endorse or promote products derived
#   from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

from __future__ import absolute_import, division, print_function

import argparse
import os
import sys
from etce.lxcfieldmanager import startfield,stopfield
from etce.lxcerror import LXCError

def main():
    parser = argparse.ArgumentParser(prog='etce-lxc', description='Manage LXC containers')

    parser.add_argument('--port',
                        action='store',
                        type=int,
                        default=None,
                        help='''If the LXCPLANFILE contains remote host(s),
                        connect to the hosts via the specified port. If not
                        specified, ETCE will look for the host's "Port" value
                        in the ~/.ssh/config file. If not found, uses the default
                        ssh port value, 22.''')
    parser.add_argument('--user',
                        action='store',
                        default=None,
                        help='''If the LXCPLANFILE contains remote host(s),
                        connect to the hosts as the specified user. If not
                        specified, ETCE will look for the host's "User" value
                        in the ~/.ssh/config file. If not found, uses the
                        current user''')

    subparsers = parser.add_subparsers(dest='selected_subparser')

    parser_start = \
        subparsers.add_parser('start',
                              help='Start a network of LXC container and Linux bridges' \
                              'based on the description in the LXC plan file.')

    parser_start.add_argument('--dryrun',
                              action='store_true',
                              default=False,
                              help='''Create the container configurations but do not start
                              the containers.''')
    parser_start.add_argument('--writehosts',
                              action='store_true',
                              default=False,
                              help='''Add an /etc/hosts entry for interface elements in the
                              LXCPLANFILE that contain a hosts_entry_ipv4 or hosts_entry_ipv6 
                              attribute. The has form "lxc.network.ipv4 hosts_entry_ipv4" or
                              "lxc.netowrk.ipv6 hosts_entry_ipv6".''')
    parser_start.add_argument('lxcplanfile',
                              metavar='LXCPLANFILE',
                              action='store',
                              help='The LXC plan file')

    parser_start.set_defaults(func=startfield)

    parser_stop = \
        subparsers.add_parser('stop',
                              help = 'Stop the LXC container network previously started with ' \
                              '"etce-lxc start"')

    parser_stop.set_defaults(func=stopfield)

    args = parser.parse_args()

    if not args.selected_subparser:
        parser.print_help()
        exit(1)

    # require superuser permisson to start and stop containers
    if not os.geteuid() == 0:
        print("Run as root.", file=sys.stderr)
        exit(2)

    try:
        args.func(args)
    except LXCError as e:
        print()
        print(e)
        print()

if __name__=='__main__':
    main()
