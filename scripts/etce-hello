#!/usr/bin/env python
#
# Copyright (c) 2017-2018 - Adjacent Link LLC, Bridgewater, New Jersey
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in
#   the documentation and/or other materials provided with the
#   distribution.
# * Neither the name of Adjacent Link LLC nor the names of its
#   contributors may be used to endorse or promote products derived
#   from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

import argparse
import os
import sys

from etce.field import Field
from etce.clientbuilder import ClientBuilder


description = """
A utility for checking connectivity to the hosts
in the provided HOSTFILE. Queries all of the HOSTFILE
hosts for a short distro description.
"""

parser = argparse.ArgumentParser(description=description,
                                 prog='etce-hello')

parser.add_argument('--port',
                    action='store',
                    type=int,
                    default=None,
                    help='''Connect to hosts using the specified port number.
                    Default: 22''')
parser.add_argument('--user',
                    action='store',
                    default=None,
                    help='''Connect to hosts as the specified user.
                    Default it the current user.''')
parser.add_argument('--policy',
                    action='store',
                    choices=['reject','warning','autoadd'],
                    default='reject',
                    help='''Specify the policy to use when a target
                    host is not listed in the local "known_hosts" file.
                    Default: reject''')
parser.add_argument('hostfile',
                    metavar='HOSTFILE',
                    help='''The ETCE Hostfile containing the hosts
                    to connect to.''')

args = parser.parse_args()

if not os.path.exists(args.hostfile) or not os.path.isfile(args.hostfile):
   print >>sys.stderr, 'Cannot find fieldfile "%s". Quitting' % args.hostfile
   exit(1)
   
hosts = Field(args.hostfile).allnodes()

client = ClientBuilder().build(hosts,
                               user=args.user,
                               port=args.port,
                               policy=args.policy)

try:
   ret = client.execute('hello hello', hosts, workingdir='/tmp')

   responses = []

   for k in ret:
      responses.append((k, ret[k].retval['result']))

   for k,retval in  sorted(responses):
      print '[%s] return: %s' % (k, retval)

finally:
   client.close()
