#!/usr/bin/env python 
#
# Copyright (c) 2015-2017 - Adjacent Link LLC, Bridgewater, New Jersey
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in
#   the documentation and/or other materials provided with the
#   distribution.
# * Neither the name of Adjacent Link LLC nor the names of its
#   contributors may be used to endorse or promote products derived
#   from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

from etce.wrapperloader import WrapperLoader
from etce.wrapperinfo import WrapperInfoPrinter


def print_path(args):
    for wpath in WrapperLoader().wrapperpaths():
        print wpath
        print



def list_wrappers(args):
    wl = WrapperLoader()
    wpaths = wl.wrapperpaths()

    for wpath in wpaths:
        wrappers = wl.loadwrappers(wpath)
        if args.prefix in wrappers:
            if args.verbose:
                wprinter = WrapperInfoPrinter(wrappers[args.prefix][0],
                                              wrappers[args.prefix][1].__doc__)
                wrappers[args.prefix][1].register(wprinter)
                print '-' * len(args.prefix)
                print args.prefix
                print '-' * len(args.prefix)
                print str(wprinter)
            else:
                print args.prefix
        else:
            for k,v in sorted(wrappers.items()):
                if not k.startswith(args.prefix):
                    continue
                if args.verbose:
                    wprinter = WrapperInfoPrinter(v[0],v[1].__doc__)
                    v[1].register(wprinter)
                    print '-' * len(k)
                    print k
                    print '-' * len(k)
                    print str(wprinter)
                else:
                    print k


def main():
    import argparse
    
    parser = argparse.ArgumentParser()

    subparsers = parser.add_subparsers()

    parser_path = subparsers.add_parser('path', 
                                        help='List the configured wrapper paths.')

    parser_path.set_defaults(func=print_path)

    parser_list = subparsers.add_parser('list', 
                                        help='List the wrappers found in the configured wrapper path.')

    parser_list.add_argument('-v',
                             '--verbose',
                             action='store_true',
                             default=False,
                             help='''Print verbose information about discovered
                             wrappers.''')

    parser_list.add_argument('prefix',
                             metavar='PREFIX',
                             nargs='?',
                             default='',
                             help='''Limit output to tests that start with the specified
                             prefix.''')

    parser_list.set_defaults(func=list_wrappers)

    args = parser.parse_args()

    args.func(args)

        

if __name__=='__main__':
    main()

