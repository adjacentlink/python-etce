#!/usr/bin/env python
#
# Copyright (c) 2015-2021 - Adjacent Link LLC, Bridgewater, New Jersey
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in
#   the documentation and/or other materials provided with the
#   distribution.
# * Neither the name of Adjacent Link LLC nor the names of its
#   contributors may be used to endorse or promote products derived
#   from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

import argparse
import os.path
import sys
import logging
from etceanalytics.configdoc import ConfigDoc
from etceanalytics.sessionanalyzer import SessionAnalyzer


if __name__=='__main__':
    parser = argparse.ArgumentParser(description=SessionAnalyzer.__doc__)

    parser.add_argument('--configfile',
                        default = None,
                        help='analysis configuration file')
    parser.add_argument('--noreanalyze',
                        action='store_true',
                        default=False,
                        help="Don't regenerate an intermediate or final analysis output "
                        "file when it already exists.")
    parser.add_argument('--loglevel',
                        choices=['error', 'info', 'debug'],
                        default='error',
                        help='Log level')
    parser.add_argument('--keepfiles',
                        action='store_true',
                        default=False,
                        help="""Keep intermediate analysis output files generated for each host and trial. For each trial
                        directory found in the sessionroot directory, host and trial outputs are placed in
                        sessionroot/trial_directory/results. Host outputs have the hostname prefixed, and the combined
                        trial file has no prefix. The default behavior is to delete these outputs. Preserving
                        intermediate files is generally useful for developing and debugging a new analyzer, but is redundant
                        for regular analysis as the individual node outputs are combined into
                        session results placed in sessionroot/results.
                        """)
    parser.add_argument('--keepgoing',
                        action='store_true',
                        default=False,
                        help='Keep going when an error is detected. Default: quit.')

    parser.add_argument('sessionroot',
                        help='the session directory to analyze')

    args = parser.parse_args()

    if args.configfile and not os.path.isfile(args.configfile):
        print('Config file "%s" does not exist or is not a file. Quitting.' \
              % (args.configfile))

        sys.exit(1)

    config = ConfigDoc(args.configfile)

    loglevel = { 'error':logging.ERROR,
                 'info':logging.INFO,
                 'debug':logging.DEBUG}[args.loglevel]

    logging.basicConfig(format='[%(module)s]: %(message)s', level=loglevel)

    SessionAnalyzer(config, args).analyze(args.sessionroot,
                                          args.noreanalyze,
                                          args.keepfiles)
